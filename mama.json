import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';

const rowStyle = {
  display: 'flex'
}

const squareStyle = {
  'width':'60px',
  'height':'60px',
  'backgroundColor': '#ddd',
  'margin': '4px',
  'display': 'flex',
  'justifyContent': 'center',
  'alignItems': 'center',
  'fontSize': '20px',
  'color': 'white'
}

const boardStyle = {
  'backgroundColor': '#eee',
  'width': '208px',
  'alignItems': 'center',
  'justifyContent': 'center',
  'display': 'flex',
  'flexDirection': 'column',
  'border': '3px #eee solid'
}

const containerStyle = {
  'display': 'flex',
  'alignItems': 'center',
  'flexDirection': 'column'
}

const instructionsStyle = {
  'marginTop': '5px',
  'marginBottom': '5px',
  'fontWeight': 'bold',
  'fontSize': '16px',
}

const buttonStyle = {
  'marginTop': '15px',
  'marginBottom': '16px',
  'width': '80px',
  'height': '40px',
  'backgroundColor': '#8acaca',
  'color': 'white',
  'fontSize': '16px',
}

const winConditions = [
  [0,1,2],
  [3,4,5],
  [6,7,8],
  [0,3,6],
  [1,4,7],
  [2,5,8],
  [0,4,8],
  [2,4,6]
];

function Square(props) {
  return (
  <button className="square" onClick={props.onClick}>
    {props.value}
  </button>
  );
}

function Board() {
  const [squares, setSquares] = useState(Array.from({length: 9}, (_, i) => i));
  const [xIsNext, setXIsNext] = useState(true);
  const [winner, setWinner] = useState(null)

  const handleClick = (i) => {
  if (squares[i] || winner) return;
  const newSquares = squares.slice();
  newSquares[i] = xIsNext ? 'X' : '0';
  setSquares(newSquares);
  setXIsNext(!xIsNext);

  const newWinner = calculateWinner(newSquares);
  setWinner(newWinner);
  }

  const renderSquare = (i) => {
  return (
  <Square 
    value={squares[i]} 
    onClick={() => handleClick(i)} 
      />
    );
  }

  const status = winner ?
  `Winner: ${winner}` :
  `Next Player: ${xIsNext ? 'X' : '0'}`;

  return (
    <div style={containerStyle} className="gameBoard">
      <div id="statusArea" className="status" style={instructionsStyle}>{status}</div>
      <div id="winnerArea" className="winner" style={instructionsStyle}>{winner ? `Winner: ${winner}` : ''}</div>
      <button style={buttonStyle} onClick={() => setSquares(Array(9).fill(null))}>Reset</button>
      <div style={boardStyle}>
        <div className="board-row" style={rowStyle}>
          {renderSquare(0)}
          {renderSquare(1)}
          {renderSquare(2)} 
        </div>
        <div className="board-row" style={rowStyle}>
          {renderSquare(3)}
          {renderSquare(4)}
          {renderSquare(5)}
        </div>
        <div className="board-row" style={rowStyle}>
          {renderSquare(6)}
          {renderSquare(7)}
          {renderSquare(8)}
        </div>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  for (let i = 0; i < winConditions.length; i++) {
    const [a,b,c] = winConditions[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
    return squares[a];
    }
  }
 return null;
 }
function Game() {
  return (
    <div className="game">
      <div className="game-board">
        <Board />
      </div>
    </div>
  );
}

const container = document.getElementById('root');
const root = createRoot(container);
root.render(<Game />);